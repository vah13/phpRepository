public void AppendIterator::append( Iterator $iterator )
public void AppendIterator::rewind( void )
public bool AppendIterator::valid( void )
public scalar AppendIterator::key( void )
public mixed AppendIterator::current( void )
public void AppendIterator::next( void )
public Iterator AppendIterator::getInnerIterator( void )
public int AppendIterator::getIteratorIndex( void )
public void AppendIterator::getArrayIterator( void )
public ArrayIterator::__construct([ mixed $array = array()  [, int $flags = 0 ]])
public void ArrayIterator::offsetExists( string $index )
public mixed ArrayIterator::offsetGet( string $index )
public void ArrayIterator::offsetSet( string $index , string $newval )
public void ArrayIterator::offsetUnset( string $index )
public void ArrayIterator::append( mixed $value )
public array ArrayIterator::getArrayCopy( void )
public int ArrayIterator::count( void )
public void ArrayIterator::getFlags( void )
public void ArrayIterator::setFlags( string $flags )
public void ArrayIterator::asort( void )
public void ArrayIterator::ksort( void )
public void ArrayIterator::uasort( string $cmp_function )
public void ArrayIterator::uksort( string $cmp_function )
public void ArrayIterator::natsort( void )
public void ArrayIterator::natcasesort( void )
public string ArrayIterator::unserialize( string $serialized )
public string ArrayIterator::serialize( void )
public void ArrayIterator::rewind( void )
public mixed ArrayIterator::current( void )
public mixed ArrayIterator::key( void )
public void ArrayIterator::next( void )
public bool ArrayIterator::valid( void )
public void ArrayIterator::seek( int $position )
public bool ArrayObject::offsetExists( mixed $index )
public mixed ArrayObject::offsetGet( mixed $index )
public void ArrayObject::offsetUnset( mixed $index )
public void ArrayObject::append( mixed $value )
public int ArrayObject::count( void )
public int ArrayObject::getFlags( void )
public void ArrayObject::setFlags( int $flags )
public void ArrayObject::asort( void )
public void ArrayObject::ksort( void )
public void ArrayObject::uasort( callable $cmp_function )
public void ArrayObject::uksort( callable $cmp_function )
public void ArrayObject::natsort( void )
public void ArrayObject::natcasesort( void )
public void ArrayObject::unserialize( string $serialized )
public string ArrayObject::serialize( void )
public ArrayIterator ArrayObject::getIterator( void )
public string ArrayObject::getIteratorClass( void )
public array ArrayObject::exchangeArray( mixed $input )
public void ArrayObject::setIteratorClass( string $iterator_class )
public string ArrayObject::getIteratorClass( void )
public CachingIterator::__construct( Iterator $iterator  [, int $flags = self::CALL_TOSTRING ])
public RecursiveCachingIterator::__construct( Iterator $iterator  [, string $flags = self::CALL_TOSTRING ])
public void CachingIterator::rewind( void )
public void CachingIterator::valid( void )
public scalar CachingIterator::key( void )
public void CachingIterator::current( void )
public void CachingIterator::next( void )
public void CachingIterator::hasNext( void )
public void CachingIterator::__toString( void )
public Iterator CachingIterator::getInnerIterator( void )
public int CachingIterator::getFlags( void )
public void CachingIterator::setFlags( int $flags )
public void CachingIterator::offsetGet( string $index )
public void CachingIterator::offsetSet( string $index , string $newval )
public void CachingIterator::offsetUnset( string $index )
public void CachingIterator::offsetExists( string $index )
public array CachingIterator::getCache( void )
public int CachingIterator::count( void )
public string CallbackFilterIterator::accept( void )
public static Closure Closure::bind( Closure $closure , object $newthis  [, mixed $newscope = "static" ])
public mixed Closure::call( object $newthis  [, mixed $... ])
public bool DOMAttr::isId( void )
public DOMAttr::__construct( string $name  [, string $value ])
string DOMCharacterData::substringData( int $offset , int $count )
void DOMCharacterData::appendData( string $data )
void DOMCharacterData::insertData( int $offset , string $data )
void DOMCharacterData::deleteData( int $offset , int $count )
void DOMCharacterData::replaceData( int $offset , int $count , string $data )
public DOMComment::__construct([ string $value ])
public DOMElement DOMDocument::createElement( string $name  [, string $value ])
public DOMElement DOMDocument::createElementNS( string $namespaceURI , string $qualifiedName  [, string $value ])
public DOMDocumentFragment DOMDocument::createDocumentFragment( void )
public DOMText DOMDocument::createTextNode( string $content )
public DOMComment DOMDocument::createComment( string $data )
public DOMCDATASection DOMDocument::createCDATASection( string $data )
public DOMProcessingInstruction DOMDocument::createProcessingInstruction( string $target  [, string $data ])
public DOMAttr DOMDocument::createAttribute( string $name )
public DOMAttr DOMDocument::createAttributeNS( string $namespaceURI , string $qualifiedName )
public DOMNodeList DOMDocument::getElementsByTagName( string $name )
public DOMNode DOMDocument::importNode( DOMNode $importedNode  [, bool $deep ])
public DOMElement DOMDocument::createElementNS( string $namespaceURI , string $qualifiedName  [, string $value ])
public DOMAttr DOMDocument::createAttributeNS( string $namespaceURI , string $qualifiedName )
public DOMElement DOMDocument::getElementById( string $elementId )
public void DOMDocument::normalizeDocument( void )
public bool DOMDocument::loadHTMLFile( string $filename  [, int $options = 0 ])
public mixed DOMDocument::loadXML( string $source  [, int $options = 0 ])
public mixed DOMDocument::loadXML( string $source  [, int $options = 0 ])
public DOMDocument::__construct([ string $version  [, string $encoding ]])
public bool DOMDocument::validate( void )
public int DOMDocument::xinclude([ int $options ])
public bool DOMDocument::loadHTMLFile( string $filename  [, int $options = 0 ])
public bool DOMDocument::loadHTMLFile( string $filename  [, int $options = 0 ])
public bool DOMDocument::schemaValidate( string $filename  [, int $flags ])
public bool DOMDocument::schemaValidateSource( string $source  [, int $flags ])
public bool DOMDocument::schemaValidateSource( string $source  [, int $flags ])
public bool DOMDocument::relaxNGValidate( string $filename )
public bool DOMDocument::relaxNGValidateSource( string $source )
public bool DOMDocument::relaxNGValidateSource( string $source )
public bool DOMDocument::registerNodeClass( string $baseclass , string $extendedclass )
public void DOMDocument::normalizeDocument( void )
public bool DOMDocumentFragment::appendXML( string $data )
public DOMAttr DOMElement::getAttributeNode( string $name )
public DOMAttr DOMElement::getAttributeNodeNS( string $namespaceURI , string $localName )
public string DOMElement::getAttribute( string $name )
public string DOMElement::getAttributeNS( string $namespaceURI , string $localName )
public DOMAttr DOMElement::setAttribute( string $name , string $value )
public DOMAttr DOMElement::setAttributeNode( DOMAttr $attr )
public DOMAttr DOMElement::setAttributeNodeNS( DOMAttr $attr )
public void DOMElement::setAttributeNS( string $namespaceURI , string $qualifiedName , string $value )
public bool DOMElement::removeAttribute( string $name )
public bool DOMElement::removeAttributeNS( string $namespaceURI , string $localName )
public bool DOMElement::removeAttributeNode( DOMAttr $oldnode )
public DOMAttr DOMElement::getAttributeNode( string $name )
public DOMAttr DOMElement::getAttributeNodeNS( string $namespaceURI , string $localName )
public DOMAttr DOMElement::setAttributeNode( DOMAttr $attr )
public DOMAttr DOMElement::setAttributeNodeNS( DOMAttr $attr )
public bool DOMElement::removeAttributeNode( DOMAttr $oldnode )
public DOMNodeList DOMElement::getElementsByTagName( string $name )
public DOMNodeList DOMElement::getElementsByTagNameNS( string $namespaceURI , string $localName )
public string DOMElement::getAttributeNS( string $namespaceURI , string $localName )
public void DOMElement::setAttributeNS( string $namespaceURI , string $qualifiedName , string $value )
public bool DOMElement::removeAttributeNS( string $namespaceURI , string $localName )
public DOMAttr DOMElement::getAttributeNodeNS( string $namespaceURI , string $localName )
public DOMAttr DOMElement::setAttributeNodeNS( DOMAttr $attr )
public DOMNodeList DOMElement::getElementsByTagNameNS( string $namespaceURI , string $localName )
public bool DOMElement::hasAttribute( string $name )
public bool DOMElement::hasAttributeNS( string $namespaceURI , string $localName )
public bool DOMElement::hasAttributeNS( string $namespaceURI , string $localName )
public void DOMElement::setIdAttribute( string $name , bool $isId )
public void DOMElement::setIdAttributeNS( string $namespaceURI , string $localName , bool $isId )
public void DOMElement::setIdAttributeNode( DOMAttr $attr , bool $isId )
public void DOMElement::setIdAttributeNS( string $namespaceURI , string $localName , bool $isId )
public void DOMElement::setIdAttributeNode( DOMAttr $attr , bool $isId )
public DOMElement::__construct( string $name  [, string $value  [, string $namespaceURI ]])
public DOMEntityReference::__construct( string $name )
public bool DOMImplementation::hasFeature( string $feature , string $version )
public DOMDocumentType DOMImplementation::createDocumentType([ string $qualifiedName = NULL  [, string $publicId = NULL  [, string $systemId = NULL ]]])
public DOMDocument DOMImplementation::createDocument([ string $namespaceURI = NULL  [, string $qualifiedName = NULL  [, DOMDocumentType $doctype = NULL ]]])
public DOMDocumentType DOMImplementation::createDocumentType([ string $qualifiedName = NULL  [, string $publicId = NULL  [, string $systemId = NULL ]]])
DOMNode DOMNamedNodeMap::getNamedItem( string $name )
DOMNode DOMNamedNodeMap::getNamedItemNS( string $namespaceURI , string $localName )
DOMNode DOMNamedNodeMap::item( int $index )
DOMNode DOMNamedNodeMap::getNamedItemNS( string $namespaceURI , string $localName )
public DOMNode DOMNode::insertBefore( DOMNode $newnode  [, DOMNode $refnode ])
public DOMNode DOMNode::removeChild( DOMNode $oldnode )
public DOMNode DOMNode::appendChild( DOMNode $newnode )
public bool DOMNode::hasChildNodes( void )
public DOMNode DOMNode::cloneNode([ bool $deep ])
public void DOMNode::normalize( void )
public bool DOMNode::isSupported( string $feature , string $version )
public bool DOMNode::hasAttributes( void )
public bool DOMNode::isSameNode( DOMNode $node )
public string DOMNode::lookupPrefix( string $namespaceURI )
public bool DOMNode::isDefaultNamespace( string $namespaceURI )
public string DOMNode::getNodePath( void )
public int DOMNode::getLineNo( void )
public int DOMNode::C14NFile( string $uri  [, bool $exclusive  [, bool $with_comments  [, array $xpath  [, array $ns_prefixes ]]]])
public string DOMNode::C14N([ bool $exclusive  [, bool $with_comments  [, array $xpath  [, array $ns_prefixes ]]]])
public int DOMNode::C14NFile( string $uri  [, bool $exclusive  [, bool $with_comments  [, array $xpath  [, array $ns_prefixes ]]]])
public DOMProcessingInstruction::__construct( string $name  [, string $value ])
public DOMText DOMText::splitText( int $offset )
public bool DOMText::isWhitespaceInElementContent( void )
public DOMXPath::__construct( DOMDocument $doc )
public bool DOMXPath::registerNamespace( string $prefix , string $namespaceURI    )
public void DOMXPath::registerPhpFunctions([ mixed $restrict ])
public string DateInterval::format( string $format )
public static DateInterval DateInterval::createFromDateString( string $time )
final public MongoDB\BSON\UTCDateTime::__construct( integer $milliseconds )
public DateTime::__wakeup( void )
public static DateTime DateTime::__set_state( array $array )
public static DateTime DateTime::createFromFormat( string $format , string $time  [, DateTimeZone $timezone = date_default_timezone_get() ])
public static array DateTime::getLastErrors( void )
public string DateTime::format( string $format )
public DateTime DateTime::modify( string $modify )
public DateTime DateTime::add( DateInterval $interval )
public DateTime DateTime::sub( DateInterval $interval )
public DateTimeZone DateTime::getTimezone( void )
public DateTime DateTime::setTimezone( DateTimeZone $timezone )
public int DateTime::getOffset( void )
public DateTime DateTime::setTime( int $hour , int $minute  [, int $second = 0 ])
public DateTime DateTime::setTimestamp( int $unixtimestamp )
public DateTime DateTime::setTimezone( DateTimeZone $timezone )
public DateTime DateTime::setDate( int $year , int $month , int $day )
public DateTime DateTime::setISODate( int $year , int $week  [, int $day = 1 ])
public DateTime DateTime::setTimestamp( int $unixtimestamp )
public int DateTime::getTimestamp( void )
public static DateTimeImmutable DateTimeImmutable::__set_state( array $array )
public static DateTimeImmutable DateTimeImmutable::createFromFormat( string $format , string $time  [, DateTimeZone $timezone ])
public static array DateTimeImmutable::getLastErrors( void )
public DateTimeImmutable DateTimeImmutable::modify( string $modify )
public DateTimeImmutable DateTimeImmutable::add( DateInterval $interval )
public DateTimeImmutable DateTimeImmutable::sub( DateInterval $interval )
public DateTimeImmutable DateTimeImmutable::setTimezone( DateTimeZone $timezone )
public DateTimeImmutable DateTimeImmutable::setTime( int $hour , int $minute  [, int $second = 0 ])
public DateTimeImmutable DateTimeImmutable::setTimestamp( int $unixtimestamp )
public DateTimeImmutable DateTimeImmutable::setTimezone( DateTimeZone $timezone )
public DateTimeImmutable DateTimeImmutable::setDate( int $year , int $month , int $day )
public DateTimeImmutable DateTimeImmutable::setISODate( int $year , int $week  [, int $day = 1 ])
public DateTimeImmutable DateTimeImmutable::setTimestamp( int $unixtimestamp )
public static DateTimeImmutable DateTimeImmutable::createFromMutable( DateTime $datetime )
public string DateTimeZone::getName( void )
public int DateTimeZone::getOffset( DateTime $datetime )
public array DateTimeZone::getTransitions([ int $timestamp_begin  [, int $timestamp_end ]])
public array DateTimeZone::getLocation( void )
public static array DateTimeZone::listAbbreviations( void )
public static array DateTimeZone::listIdentifiers([ int $what = DateTimeZone::ALL  [, string $country = NULL ]])
public void Directory::close([ resource $dir_handle ])
public void Directory::rewind([ resource $dir_handle ])
public string Directory::read([ resource $dir_handle ])
public RecursiveDirectoryIterator::__construct( string $path  [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ])
public string DirectoryIterator::getFilename( void )
public string DirectoryIterator::getExtension( void )
public string DirectoryIterator::getBasename([ string $suffix  ])
public bool DirectoryIterator::isDot( void )
public void DirectoryIterator::rewind( void )
public void RecursiveDirectoryIterator::rewind( void )
public bool DirectoryIterator::valid( void )
public string DirectoryIterator::key( void )
public string RecursiveDirectoryIterator::key( void )
public DirectoryIterator DirectoryIterator::current( void )
public void DirectoryIterator::next( void )
public void RecursiveDirectoryIterator::next( void )
public void DirectoryIterator::seek( int $position )
public string DirectoryIterator::__toString( void )
public string DirectoryIterator::getPath( void )
public string DirectoryIterator::getPathname( void )
public string DirectoryIterator::getPathname( void )
public int DirectoryIterator::getPerms( void )
public int DirectoryIterator::getInode( void )
public int DirectoryIterator::getSize( void )
public int DirectoryIterator::getOwner( void )
public int DirectoryIterator::getGroup( void )
public int DirectoryIterator::getATime( void )
public int DirectoryIterator::getMTime( void )
public int DirectoryIterator::getCTime( void )
public string DirectoryIterator::getType( void )
public bool DirectoryIterator::isWritable( void )
public bool DirectoryIterator::isReadable( void )
public bool DirectoryIterator::isExecutable( void )
public bool DirectoryIterator::isFile( void )
public bool DirectoryIterator::isDir( void )
public bool DirectoryIterator::isLink( void )
public void EmptyIterator::rewind( void )
public bool EmptyIterator::valid( void )
public scalar EmptyIterator::key( void )
public mixed EmptyIterator::current( void )
public void EmptyIterator::next( void )
final public int ErrorException::getSeverity( void )
public Yaf_Exception::__construct( void )
final public string Exception::getMessage( void )
final public mixed Exception::getCode( void )
final public string Exception::getFile( void )
final public int Exception::getLine( void )
final public array Exception::getTrace( void )
final public string Exception::getTraceAsString( void )
final public Exception Exception::getPrevious( void )
public void Yaf_Exception::getPrevious( void )
final public string Exception::getTraceAsString( void )
public string Exception::__toString( void )
public FilesystemIterator::__construct( string $path  [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS ])
public void FilesystemIterator::rewind( void )
public void FilesystemIterator::next( void )
public string FilesystemIterator::key( void )
public mixed FilesystemIterator::current( void )
public int FilesystemIterator::getFlags( void )
public void FilesystemIterator::setFlags([ int $flags ])
public FilterIterator::__construct( Iterator $iterator )
public RecursiveFilterIterator::__construct( RecursiveIterator $iterator )
public void FilterIterator::rewind( void )
public bool FilterIterator::valid( void )
public mixed FilterIterator::key( void )
public mixed FilterIterator::current( void )
public void FilterIterator::next( void )
public Iterator FilterIterator::getInnerIterator( void )
public abstract bool FilterIterator::accept( void )
public string CallbackFilterIterator::accept( void )
public void Generator::rewind( void )
public bool Generator::valid( void )
public mixed Generator::current( void )
public mixed Generator::key( void )
public void Generator::next( void )
public mixed Generator::send( mixed $value )
public mixed Generator::throw( Exception $exception )
public mixed Generator::getReturn( void )
public void Generator::__wakeup( void )
public int GlobIterator::count( void )
public InfiniteIterator::__construct( Iterator $iterator )
public void InfiniteIterator::next( void )
public IteratorIterator::__construct( Traversable $iterator )
public RecursiveIteratorIterator::__construct( Traversable $iterator  [, int $mode = RecursiveIteratorIterator::LEAVES_ONLY  [, int $flags = 0 ]])
public void IteratorIterator::rewind( void )
public void RecursiveIteratorIterator::rewind( void )
public bool IteratorIterator::valid( void )
public bool RecursiveIteratorIterator::valid( void )
public mixed RecursiveIteratorIterator::key( void )
public scalar IteratorIterator::key( void )
public mixed IteratorIterator::current( void )
public mixed RecursiveIteratorIterator::current( void )
public void IteratorIterator::next( void )
public void RecursiveIteratorIterator::next( void )
public void RecursiveIteratorIterator::nextElement( void )
public Traversable IteratorIterator::getInnerIterator( void )
public iterator RecursiveIteratorIterator::getInnerIterator( void )
public LimitIterator::__construct( Iterator $iterator  [, int $offset = 0  [, int $count = -1 ]])
public void LimitIterator::rewind( void )
public bool LimitIterator::valid( void )
public mixed LimitIterator::key( void )
public mixed LimitIterator::current( void )
public void LimitIterator::next( void )
public int LimitIterator::seek( int $position )
public int LimitIterator::getPosition( void )
public Iterator LimitIterator::getInnerIterator( void )
public int MultipleIterator::getFlags( void )
public void MultipleIterator::setFlags( int $flags )
public void MultipleIterator::attachIterator( Iterator $iterator  [, string $infos ])
public void MultipleIterator::detachIterator( Iterator $iterator )
public bool MultipleIterator::containsIterator( Iterator $iterator )
public int MultipleIterator::countIterators( void )
public void MultipleIterator::rewind( void )
public bool MultipleIterator::valid( void )
public array MultipleIterator::key( void )
public array MultipleIterator::current( void )
public void MultipleIterator::next( void )
public NoRewindIterator::__construct( Iterator $iterator )
public void NoRewindIterator::rewind( void )
public bool NoRewindIterator::valid( void )
public mixed NoRewindIterator::key( void )
public mixed NoRewindIterator::current( void )
public void NoRewindIterator::next( void )
public iterator NoRewindIterator::getInnerIterator( void )
public PDOStatement PDO::prepare( string $statement  [, array $driver_options = array() ])
public bool PDO::beginTransaction( void )
public bool PDO::commit( void )
public bool PDO::rollBack( void )
public bool PDO::inTransaction( void )
public bool PDO::setAttribute( int $attribute , mixed $value )
public int PDO::exec( string $statement )
public PDOStatement PDO::query( string $statement )
public mixed PDO::errorCode( void )
public array PDO::errorInfo( void )
public mixed PDO::getAttribute( int $attribute )
public string PDO::quote( string $string  [, int $parameter_type = PDO::PARAM_STR ])
public bool PDOStatement::execute([ array $input_parameters ])
public array PDOStatement::fetchAll([ int $fetch_style  [, mixed $fetch_argument  [, array $ctor_args = array() ]]])
public mixed PDOStatement::fetch([ int $fetch_style  [, int $cursor_orientation = PDO::FETCH_ORI_NEXT  [, int $cursor_offset = 0 ]]])
public mixed PDOStatement::fetchColumn([ int $column_number = 0 ])
public mixed PDOStatement::fetchObject([ string $class_name = "stdClass"  [, array $ctor_args ]])
public bool PDOStatement::bindParam( mixed $parameter , mixed &$variable  [, int $data_type = PDO::PARAM_STR  [, int $length  [, mixed $driver_options ]]])
public bool PDOStatement::bindColumn ( mixed $column , mixed &$param  [, int $type  [, int $maxlen  [, mixed $driverdata  ]]])
public int PDOStatement::rowCount( void )
public mixed PDOStatement::fetchColumn([ int $column_number = 0 ])
public array PDOStatement::fetchAll([ int $fetch_style  [, mixed $fetch_argument  [, array $ctor_args = array() ]]])
public mixed PDOStatement::fetchObject([ string $class_name = "stdClass"  [, array $ctor_args ]])
public string PDOStatement::errorCode( void )
public array PDOStatement::errorInfo( void )
public bool PDOStatement::setAttribute( int $attribute , mixed $value )
public mixed PDOStatement::getAttribute( int $attribute )
public int PDOStatement::columnCount( void )
public array PDOStatement::getColumnMeta( int $column )
public bool PDOStatement::setFetchMode( int $mode )
public bool PDOStatement::nextRowset( void )
public bool PDOStatement::closeCursor( void )
public ParentIterator::__construct( RecursiveIterator $iterator )
public bool ParentIterator::accept( void )
public bool ParentIterator::hasChildren( void )
public ParentIterator ParentIterator::getChildren( void )
public void ParentIterator::rewind( void )
public void ParentIterator::next( void )
public Phar::__construct( string $fname  [, int $flags  [, string $alias ]])
public void Phar::addEmptyDir( string $dirname )
public void Phar::addFile( string $file  [, string $localname ])
public void Phar::addFromString( string $localname , string $contents )
public array Phar::buildFromDirectory( string $base_dir  [, string $regex ])
public array Phar::buildFromIterator( Iterator $iter  [, string $base_directory ])
public void Phar::compressFiles( int $compression )
public bool Phar::decompressFiles( void )
public bool Phar::compressAllFilesBZIP2( void )
public bool Phar::compressAllFilesGZ( void )
public void Phar::compressFiles( int $compression )
public bool Phar::decompressFiles( void )
public object Phar::decompress([ string $extension ])
public Phar Phar::convertToExecutable([ int $format = 9021976  [, int $compression = 9021976  [, string $extension ]]])
public PharData Phar::convertToData([ int $format = 9021976  [, int $compression = 9021976  [, string $extension ]]])
public bool Phar::copy( string $oldfile , string $newfile )
public int Phar::count( void )
public bool Phar::delete( string $entry )
public bool Phar::delMetadata( void )
public bool Phar::extractTo( string $pathto  [, string|array $files  [, bool $overwrite = false ]])
public mixed Phar::getMetadata( void )
public bool Phar::getModified( void )
public array Phar::getSignature( void )
public string Phar::getStub( void )
public string Phar::getVersion( void )
public bool Phar::hasMetadata( void )
public bool Phar::isBuffering( void )
public mixed Phar::isCompressed( void )
public bool Phar::isFileFormat( int $format )
public bool Phar::isWritable( void )
public bool Phar::offsetExists( string $offset )
public int Phar::offsetGet( string $offset )
public void Phar::offsetSet( string $offset , string $value )
public bool Phar::offsetUnset( string $offset )
public bool Phar::setAlias( string $alias )
public bool Phar::setDefaultStub([ string $index  [, string $webindex ]])
public void Phar::setMetadata( mixed $metadata )
public void Phar::setSignatureAlgorithm( int $sigtype )
public bool Phar::setStub( string $stub  [, int $len = -1 ])
public void Phar::startBuffering( void )
public void Phar::stopBuffering( void )
final public static string Phar::apiVersion( void )
final public static bool Phar::canCompress([ int $type = 0 ])
final public static bool Phar::canWrite( void )
final public static string Phar::createDefaultStub([ string $indexfile  [, string $webindexfile ]])
final public static array Phar::getSupportedCompression( void )
final public static array Phar::getSupportedSignatures( void )
final public static void Phar::interceptFileFuncs( void )
final public static bool Phar::isValidPharFilename( string $filename  [, bool $executable = true ])
final public static bool Phar::loadPhar( string $filename  [, string $alias ])
final public static bool Phar::mapPhar([ string $alias  [, int $dataoffset = 0 ]])
final public static string Phar::running([ bool $retphar = true ])
final public static void Phar::mount( string $pharpath , string $externalpath )
final public static void Phar::mungServer( array $munglist )
final public static bool Phar::unlinkArchive( string $archive )
final public static void Phar::webPhar([ string $alias  [, string $index = "index.php"  [, string $f404  [, array $mimetypes  [, callable $rewrites ]]]]])
public bool Phar::isFileFormat( int $format )
PharData::__construct( string $fname  [, int $flags  [, string $alias  [, int $format = Phar::TAR ]]])
bool PharData::addEmptyDir( string $dirname )
bool PharData::addFromString( string $localname , string $contents )
array PharData::buildFromIterator( Iterator $iter  [, string $base_directory ])
bool PharData::compressFiles( int $compression )
bool PharData::decompressFiles( void )
bool PharData::compressFiles( int $compression )
object PharData::compress( int $compression  [, string $extension ])
bool PharData::decompressFiles( void )
object PharData::decompress([ string $extension ])
Phar PharData::convertToExecutable([ int $format  [, int $compression  [, string $extension ]]])
PharData PharData::convertToData([ int $format  [, int $compression  [, string $extension ]]])
bool PharData::copy( string $oldfile , string $newfile )
bool PharData::delete( string $entry )
bool PharData::delMetadata( void )
bool PharData::extractTo( string $pathto  [, string|array $files  [, bool $overwrite = false ]])
bool PharData::isWritable( void )
void PharData::offsetSet( string $offset , string $value )
bool PharData::offsetUnset( string $offset )
bool PharData::setAlias( string $alias )
bool PharData::setDefaultStub([ string $index  [, string $webindex ]])
bool PharData::setStub( string $stub  [, int $len = -1 ])
public PharFileInfo::__construct( string $entry )
public void PharFileInfo::chmod( int $permissions )
public bool PharFileInfo::compress( int $compression )
public bool PharFileInfo::decompress( void )
public bool PharFileInfo::delMetadata( void )
public int PharFileInfo::getCompressedSize( void )
public int PharFileInfo::getCRC32( void )
public mixed PharFileInfo::getMetadata( void )
public int PharFileInfo::getPharFlags( void )
public bool PharFileInfo::hasMetadata( void )
public bool PharFileInfo::isCompressed([ int $compression_type = 9021976 ])
public bool PharFileInfo::isCompressedBZIP2( void )
public bool PharFileInfo::isCompressedGZ( void )
public bool PharFileInfo::isCRCChecked( void )
public void PharFileInfo::setMetadata( mixed $metadata )
public bool RecursiveArrayIterator::hasChildren( void )
public RecursiveArrayIterator RecursiveArrayIterator::getChildren( void )
public RecursiveCachingIterator::__construct( Iterator $iterator  [, string $flags = self::CALL_TOSTRING ])
public bool RecursiveCachingIterator::hasChildren( void )
public RecursiveCachingIterator RecursiveCachingIterator::getChildren( void )
public bool RecursiveCallbackFilterIterator::hasChildren( void )
public RecursiveCallbackFilterIterator RecursiveCallbackFilterIterator::getChildren( void )
public RecursiveDirectoryIterator::__construct( string $path  [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ])
public bool RecursiveDirectoryIterator::hasChildren([ bool $allow_links = false ])
public mixed RecursiveDirectoryIterator::getChildren( void )
public string RecursiveDirectoryIterator::getSubPath( void )
public string RecursiveDirectoryIterator::getSubPathname( void )
public string RecursiveDirectoryIterator::getSubPathname( void )
public void RecursiveDirectoryIterator::rewind( void )
public void RecursiveDirectoryIterator::next( void )
public string RecursiveDirectoryIterator::key( void )
public RecursiveFilterIterator::__construct( RecursiveIterator $iterator )
public bool RecursiveFilterIterator::hasChildren( void )
public RecursiveFilterIterator RecursiveFilterIterator::getChildren( void )
public RecursiveIteratorIterator::__construct( Traversable $iterator  [, int $mode = RecursiveIteratorIterator::LEAVES_ONLY  [, int $flags = 0 ]])
public void RecursiveIteratorIterator::rewind( void )
public bool RecursiveIteratorIterator::valid( void )
public mixed RecursiveIteratorIterator::key( void )
public mixed RecursiveIteratorIterator::current( void )
public void RecursiveIteratorIterator::next( void )
public void RecursiveIteratorIterator::nextElement( void )
public int RecursiveIteratorIterator::getDepth( void )
public RecursiveIterator RecursiveIteratorIterator::getSubIterator([ int $level ])
public iterator RecursiveIteratorIterator::getInnerIterator( void )
public void RecursiveIteratorIterator::beginIteration( void )
public void RecursiveIteratorIterator::endIteration( void )
public bool RecursiveIteratorIterator::callHasChildren( void )
public RecursiveIterator RecursiveIteratorIterator::callGetChildren( void )
public void RecursiveIteratorIterator::beginChildren( void )
public void RecursiveIteratorIterator::endChildren( void )
public void RecursiveIteratorIterator::nextElement( void )
public void RecursiveIteratorIterator::setMaxDepth([ string $max_depth = -1 ])
public mixed RecursiveIteratorIterator::getMaxDepth( void )
public bool RecursiveRegexIterator::hasChildren( void )
public RecursiveRegexIterator RecursiveRegexIterator::getChildren( void )
public RecursiveTreeIterator::__construct( RecursiveIterator|IteratorAggregate $it  [, int $flags = RecursiveTreeIterator::BYPASS_KEY  [, int $cit_flags = CachingIterator::CATCH_GET_CHILD  [, int $mode = RecursiveIteratorIterator::SELF_FIRST ]]])
public void RecursiveTreeIterator::rewind( void )
public bool RecursiveTreeIterator::valid( void )
public string RecursiveTreeIterator::key( void )
public string RecursiveTreeIterator::current( void )
public void RecursiveTreeIterator::next( void )
public void RecursiveTreeIterator::nextElement( void )
public RecursiveIterator RecursiveTreeIterator::beginIteration( void )
public void RecursiveTreeIterator::endIteration( void )
public bool RecursiveTreeIterator::callHasChildren( void )
public RecursiveIterator RecursiveTreeIterator::callGetChildren( void )
public void RecursiveTreeIterator::beginChildren( void )
public void RecursiveTreeIterator::endChildren( void )
public void RecursiveTreeIterator::nextElement( void )
public string RecursiveTreeIterator::getPrefix( void )
public void RecursiveTreeIterator::setPrefixPart( int $part , string $value )
public string RecursiveTreeIterator::getEntry( void )
public void RecursiveTreeIterator::getPostfix( void )
public static array Reflection::getModifierNames( int $modifiers )
public static string Reflection::export( Reflector $reflector  [, bool $return = false ])
public static string ReflectionClass::export( mixed $argument  [, bool $return = false ])
public ReflectionClass::__construct( mixed $argument )
public string ReflectionClass::__toString( void )
public string ReflectionClass::getName( void )
public string ReflectionClass::getNamespaceName( void )
public bool ReflectionClass::isInternal( void )
public bool ReflectionClass::isUserDefined( void )
public bool ReflectionClass::isAnonymous( void )
public bool ReflectionClass::isInstantiable( void )
public bool ReflectionClass::isCloneable( void )
public string ReflectionClass::getFileName( void )
public int ReflectionClass::getStartLine( void )
public int ReflectionClass::getEndLine( void )
public string ReflectionClass::getDocComment( void )
public ReflectionMethod ReflectionClass::getConstructor( void )
public bool ReflectionClass::hasMethod( string $name )
public ReflectionMethod ReflectionClass::getMethod( string $name )
public array ReflectionClass::getMethods([ int $filter ])
public array ReflectionClass::getMethods([ int $filter ])
public bool ReflectionClass::hasProperty( string $name )
public ReflectionProperty ReflectionClass::getProperty( string $name )
public array ReflectionClass::getProperties([ int $filter ])
public bool ReflectionClass::hasConstant( string $name )
public array ReflectionClass::getConstants( void )
public array ReflectionClass::getConstants( void )
public mixed ReflectionClass::getConstant( string $name )
public array ReflectionClass::getInterfaces( void )
public array ReflectionClass::getInterfaceNames( void )
public bool ReflectionClass::isInterface( void )
public array ReflectionClass::getTraits( void )
public array ReflectionClass::getTraitNames( void )
public array ReflectionClass::getTraitAliases( void )
public bool ReflectionClass::isTrait( void )
public bool ReflectionClass::isAbstract( void )
public bool ReflectionClass::isFinal( void )
public int ReflectionClass::getModifiers( void )
public bool ReflectionClass::isInstance( object $object )
public object ReflectionClass::newInstance( mixed $args  [, mixed $... ])
public object ReflectionClass::newInstanceArgs([ array $args ])
public object ReflectionClass::newInstanceWithoutConstructor( void )
public object ReflectionClass::newInstanceWithoutConstructor( void )
public object ReflectionClass::newInstanceArgs([ array $args ])
public object ReflectionClass::getParentClass( void )
public bool ReflectionClass::isSubclassOf( string $class )
public array ReflectionClass::getStaticProperties( void )
public mixed ReflectionClass::getStaticPropertyValue( string $name  [, mixed &$def_value ])
public void ReflectionClass::setStaticPropertyValue( string $name , string $value )
public array ReflectionClass::getDefaultProperties( void )
public bool ReflectionClass::isIterateable( void )
public bool ReflectionClass::implementsInterface( string $interface )
public ReflectionExtension ReflectionClass::getExtension( void )
public string ReflectionClass::getExtensionName( void )
public string ReflectionClass::getExtensionName( void )
public bool ReflectionClass::inNamespace( void )
public string ReflectionClass::getNamespaceName( void )
public string ReflectionClass::getShortName( void )
public static string ReflectionExtension::export( string $name  [, string $return = false ])
public ReflectionExtension::__construct( string $name )
public string ReflectionExtension::__toString( void )
public string ReflectionExtension::getName( void )
public string ReflectionExtension::getVersion( void )
public array ReflectionExtension::getFunctions( void )
public array ReflectionExtension::getConstants( void )
public array ReflectionExtension::getINIEntries( void )
public array ReflectionExtension::getClasses( void )
public array ReflectionExtension::getClassNames( void )
public array ReflectionExtension::getDependencies( void )
public void ReflectionExtension::info( void )
public void ReflectionExtension::isPersistent( void )
public void ReflectionExtension::isTemporary( void )
public ReflectionFunction::__construct( mixed $name )
public string ReflectionFunction::__toString( void )
public static string ReflectionFunction::export( string $name  [, string $return ])
public bool ReflectionFunction::isDisabled( void )
public mixed ReflectionFunction::invoke([ mixed $parameter  [, mixed $... ]])
public mixed ReflectionFunction::invokeArgs( array $args )
public mixed ReflectionFunction::invokeArgs( array $args )
public Closure ReflectionFunction::getClosure( void )
public bool ReflectionFunctionAbstract::inNamespace( void )
public bool ReflectionFunctionAbstract::isClosure( void )
public bool ReflectionFunctionAbstract::isDeprecated( void )
public bool ReflectionFunctionAbstract::isInternal( void )
public bool ReflectionFunctionAbstract::isUserDefined( void )
public bool ReflectionFunctionAbstract::isGenerator( void )
public bool ReflectionFunctionAbstract::isVariadic( void )
public object ReflectionFunctionAbstract::getClosureThis( void )
public ReflectionClass ReflectionFunctionAbstract::getClosureScopeClass( void )
public int ReflectionFunctionAbstract::getEndLine( void )
public ReflectionExtension ReflectionFunctionAbstract::getExtension( void )
public string ReflectionFunctionAbstract::getExtensionName( void )
public string ReflectionFunctionAbstract::getExtensionName( void )
public string ReflectionFunctionAbstract::getFileName( void )
public string ReflectionFunctionAbstract::getName( void )
public string ReflectionFunctionAbstract::getNamespaceName( void )
public string ReflectionFunctionAbstract::getNamespaceName( void )
public int ReflectionFunctionAbstract::getNumberOfParameters( void )
public int ReflectionFunctionAbstract::getNumberOfRequiredParameters( void )
public array ReflectionFunctionAbstract::getParameters( void )
public string ReflectionFunctionAbstract::getShortName( void )
public int ReflectionFunctionAbstract::getStartLine( void )
public array ReflectionFunctionAbstract::getStaticVariables( void )
public bool ReflectionFunctionAbstract::returnsReference( void )
public bool ReflectionFunctionAbstract::hasReturnType( void )
public ReflectionType ReflectionFunctionAbstract::getReturnType( void )
abstract public void ReflectionFunctionAbstract::__toString( void )
public static string ReflectionMethod::export( string $class , string $name  [, bool $return = false ])
public ReflectionMethod::__construct( mixed $class , string $name )
public string ReflectionMethod::__toString( void )
public bool ReflectionMethod::isPublic( void )
public bool ReflectionMethod::isPrivate( void )
public bool ReflectionMethod::isProtected( void )
public bool ReflectionMethod::isAbstract( void )
public bool ReflectionMethod::isFinal( void )
public bool ReflectionMethod::isStatic( void )
public bool ReflectionMethod::isConstructor( void )
public bool ReflectionMethod::isDestructor( void )
public Closure ReflectionMethod::getClosure( object $object )
public int ReflectionMethod::getModifiers( void )
public mixed ReflectionMethod::invoke( object $object  [, mixed $parameter  [, mixed $... ]])
public mixed ReflectionMethod::invokeArgs( object $object , array $args )
public mixed ReflectionMethod::invokeArgs( object $object , array $args )
public ReflectionClass ReflectionMethod::getDeclaringClass( void )
public ReflectionMethod ReflectionMethod::getPrototype( void )
public void ReflectionMethod::setAccessible( bool $accessible )
public static string ReflectionObject::export( string $argument  [, bool $return ])
public ReflectionObject::__construct( object $argument )
public static string ReflectionParameter::export( string $function , string $parameter  [, bool $return ])
public ReflectionParameter::__construct( string $function , string $parameter )
public string ReflectionParameter::__toString( void )
public string ReflectionParameter::getName( void )
public bool ReflectionParameter::isPassedByReference( void )
public bool ReflectionParameter::canBePassedByValue( void )
public ReflectionFunctionAbstract ReflectionParameter::getDeclaringFunction( void )
public ReflectionClass ReflectionParameter::getDeclaringClass( void )
public ReflectionClass ReflectionParameter::getClass( void )
public bool ReflectionParameter::hasType( void )
public ReflectionType ReflectionParameter::getType( void )
public bool ReflectionParameter::isArray( void )
public bool ReflectionParameter::isCallable( void )
public bool ReflectionParameter::allowsNull( void )
public int ReflectionParameter::getPosition( void )
public bool ReflectionParameter::isOptional( void )
public bool ReflectionParameter::isDefaultValueAvailable( void )
public mixed ReflectionParameter::getDefaultValue( void )
public string ReflectionParameter::getDefaultValueConstantName( void )
public bool ReflectionParameter::isDefaultValueConstant( void )
public string ReflectionParameter::getDefaultValueConstantName( void )
public bool ReflectionParameter::isVariadic( void )
public static string ReflectionProperty::export( mixed $class , string $name  [, bool $return ])
public ReflectionProperty::__construct( mixed $class , string $name )
public string ReflectionProperty::__toString( void )
public string ReflectionProperty::getName( void )
public mixed ReflectionProperty::getValue([ object $object ])
public void ReflectionProperty::setValue( object $object , mixed $value )
public bool ReflectionProperty::isPublic( void )
public bool ReflectionProperty::isPrivate( void )
public bool ReflectionProperty::isProtected( void )
public bool ReflectionProperty::isStatic( void )
public bool ReflectionProperty::isDefault( void )
public int ReflectionProperty::getModifiers( void )
public ReflectionClass ReflectionProperty::getDeclaringClass( void )
public string ReflectionProperty::getDocComment( void )
public void ReflectionProperty::setAccessible( bool $accessible )
public static string ReflectionZendExtension::export( string $name  [, string $return ])
public ReflectionZendExtension::__construct( string $name )
public string ReflectionZendExtension::__toString( void )
public string ReflectionZendExtension::getName( void )
public string ReflectionZendExtension::getVersion( void )
public string ReflectionZendExtension::getAuthor( void )
public string ReflectionZendExtension::getURL( void )
public string ReflectionZendExtension::getCopyright( void )
public bool RegexIterator::accept( void )
public int RegexIterator::getMode( void )
public void RegexIterator::setMode( int $mode )
public int RegexIterator::getFlags( void )
public void RegexIterator::setFlags( int $flags )
public int RegexIterator::getPregFlags( void )
public void RegexIterator::setPregFlags( int $preg_flags )
public string RegexIterator::getRegex( void )
public void SQLite3::open( string $filename  [, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE  [, string $encryption_key ]])
public bool SQLite3::close( void )
public static array SQLite3::version( void )
public int SQLite3::lastInsertRowID( void )
public int SQLite3::lastErrorCode( void )
public string SQLite3::lastErrorMsg( void )
public bool SQLite3::busyTimeout( int $msecs )
public bool SQLite3::loadExtension( string $shared_library )
public int SQLite3::changes( void )
public static string SQLite3::escapeString( string $value )
public SQLite3Stmt SQLite3::prepare( string $query )
public SQLite3Result SQLite3::query( string $query )
public mixed SQLite3::querySingle( string $query  [, bool $entire_row = false ])
public mixed SQLite3::querySingle( string $query  [, bool $entire_row = false ])
public bool SQLite3::createFunction( string $name , mixed $callback  [, int $argument_count = -1 ])
public bool SQLite3::createAggregate( string $name , mixed $step_callback , mixed $final_callback  [, int $argument_count = -1 ])
public bool SQLite3::createCollation( string $name , callable $callback )
public SQLite3::__construct( string $filename  [, int $flags  [, string $encryption_key ]])
public int SQLite3Result::numColumns( void )
public string SQLite3Result::columnName( int $column_number )
public int SQLite3Result::columnType( int $column_number )
public array SQLite3Result::fetchArray([ int $mode = SQLITE3_BOTH ])
public bool SQLite3Result::reset( void )
public bool SQLite3Result::finalize( void )
public int SQLite3Stmt::paramCount( void )
public bool SQLite3Stmt::close( void )
public bool SQLite3Stmt::reset( void )
public bool SQLite3Stmt::clear( void )
public SQLite3Result SQLite3Stmt::execute( void )
public bool SQLite3Stmt::bindParam( string $sql_param , mixed &$param  [, int $type ])
public bool SQLite3Stmt::bindValue( string $sql_param , mixed $value  [, int $type ])
public bool SessionHandler::open( string $save_path , string $session_name )
public bool SessionHandler::close( void )
public string SessionHandler::read( string $session_id )
public bool SessionHandler::write( string $session_id , string $session_data )
public bool SessionHandler::destroy( string $session_id )
public bool SessionHandler::gc( int $maxlifetime )
public string SessionHandler::create_sid( void )
public array SimpleXMLElement::xpath( string $path )
public bool SimpleXMLElement::registerXPathNamespace( string $prefix , string $ns )
public SimpleXMLElement SimpleXMLElement::children([ string $ns  [, bool $is_prefix = false ]])
public array SimpleXMLElement::getDocNamespaces([ bool $recursive = false  [, bool $from_root = true ]])
public string SimpleXMLElement::getName( void )
public SimpleXMLElement SimpleXMLElement::addChild( string $name  [, string $value  [, string $namespace ]])
public void SimpleXMLElement::addAttribute( string $name  [, string $value  [, string $namespace ]])
public string SimpleXMLElement::__toString( void )
public int SimpleXMLElement::count( void )
public void SimpleXMLIterator::rewind( void )
public bool SimpleXMLIterator::valid( void )
public mixed SimpleXMLIterator::current( void )
public mixed SimpleXMLIterator::key( void )
public void SimpleXMLIterator::next( void )
public bool SimpleXMLIterator::hasChildren( void )
public SimpleXMLIterator SimpleXMLIterator::getChildren( void )
public mixed SplDoublyLinkedList::pop( void )
public mixed SplDoublyLinkedList::shift( void )
public void SplDoublyLinkedList::push( mixed $value )
public void SplDoublyLinkedList::unshift( mixed $value )
public mixed SplDoublyLinkedList::top( void )
public mixed SplDoublyLinkedList::bottom( void )
public bool SplDoublyLinkedList::isEmpty( void )
public void SplDoublyLinkedList::setIteratorMode( int $mode )
public int SplDoublyLinkedList::getIteratorMode( void )
public int SplDoublyLinkedList::count( void )
public bool SplDoublyLinkedList::offsetExists( mixed $index )
public mixed SplDoublyLinkedList::offsetGet( mixed $index )
public void SplDoublyLinkedList::offsetSet( mixed $index , mixed $newval )
public void SplDoublyLinkedList::offsetUnset( mixed $index )
public void SplDoublyLinkedList::add( mixed $index , mixed $newval )
public void SplDoublyLinkedList::rewind( void )
public mixed SplDoublyLinkedList::current( void )
public mixed SplDoublyLinkedList::key( void )
public void SplDoublyLinkedList::next( void )
public void SplDoublyLinkedList::prev( void )
public bool SplDoublyLinkedList::valid( void )
public void SplDoublyLinkedList::unserialize( string $serialized )
public string SplDoublyLinkedList::serialize( void )
public SplFileInfo::__construct( string $file_name )
public SplFileInfo SplFileInfo::getPathInfo([ string $class_name ])
public string SplFileInfo::getPath( void )
public string SplFileInfo::getPathname( void )
public string SplFileInfo::getFilename( void )
public string SplFileInfo::getExtension( void )
public string SplFileInfo::getBasename([ string $suffix ])
public string SplFileInfo::getPathname( void )
public int SplFileInfo::getPerms( void )
public int SplFileInfo::getInode( void )
public int SplFileInfo::getSize( void )
public int SplFileInfo::getOwner( void )
public int SplFileInfo::getGroup( void )
public int SplFileInfo::getATime( void )
public int SplFileInfo::getMTime( void )
public int SplFileInfo::getCTime( void )
public string SplFileInfo::getType( void )
public bool SplFileInfo::isWritable( void )
public bool SplFileInfo::isReadable( void )
public bool SplFileInfo::isExecutable( void )
public bool SplFileInfo::isFile( void )
public bool SplFileInfo::isDir( void )
public bool SplFileInfo::isLink( void )
public string SplFileInfo::getLinkTarget( void )
public string SplFileInfo::getRealPath( void )
public SplFileInfo SplFileInfo::getFileInfo([ string $class_name ])
public SplFileInfo SplFileInfo::getPathInfo([ string $class_name ])
public SplFileObject SplFileInfo::openFile([ string $open_mode = "r"  [, bool $use_include_path = false  [, resource $context = NULL ]]])
public void SplFileInfo::setFileClass([ string $class_name = "SplFileObject" ])
public void SplFileInfo::setInfoClass([ string $class_name = "SplFileInfo" ])
public void SplFileInfo::__toString( void )
public void SplFileObject::rewind( void )
public bool SplFileObject::eof( void )
public bool SplFileObject::valid( void )
public string SplFileObject::fgets( void )
public string SplFileObject::fgetss([ string $allowable_tags ])
public array SplFileObject::fgetcsv([ string $delimiter = ","  [, string $enclosure = "\""  [, string $escape = "\\" ]]])
public int SplFileObject::fputcsv( array $fields  [, string $delimiter = ","  [, string $enclosure = '"'  [, string $escape = "\" ]]])
public void SplFileObject::setCsvControl([ string $delimiter = ","  [, string $enclosure = "\""  [, string $escape = "\\" ]]])
public array SplFileObject::getCsvControl( void )
public bool SplFileObject::flock( int $operation  [, int &$wouldblock ])
public bool SplFileObject::fflush( void )
public int SplFileObject::ftell( void )
public int SplFileObject::fseek( int $offset  [, int $whence = SEEK_SET ])
public array SplFileObject::fgetcsv([ string $delimiter = ","  [, string $enclosure = "\""  [, string $escape = "\\" ]]])
public string SplFileObject::fgetc( void )
public int SplFileObject::fpassthru( void )
public string SplFileObject::fgetss([ string $allowable_tags ])
public mixed SplFileObject::fscanf( string $format  [, mixed &$... ])
public int SplFileObject::fwrite( string $str  [, int $length ])
public string SplFileObject::fread( int $length )
public array SplFileObject::fstat( void )
public bool SplFileObject::ftruncate( int $size )
public string|array SplFileObject::current( void )
public int SplFileObject::key( void )
public void SplFileObject::next( void )
public void SplFileObject::setFlags( int $flags )
public int SplFileObject::getFlags( void )
public void SplFileObject::setMaxLineLen( int $max_len )
public int SplFileObject::getMaxLineLen( void )
public bool SplFileObject::hasChildren( void )
public void SplFileObject::getChildren( void )
public void SplFileObject::seek( int $line_pos )
public void SplFileObject::__toString( void )
public void SplFixedArray::__wakeup( void )
public int SplFixedArray::count( void )
public array SplFixedArray::toArray( void )
public static SplFixedArray SplFixedArray::fromArray( array $array  [, bool $save_indexes = true ])
public int SplFixedArray::getSize( void )
public int SplFixedArray::setSize( int $size )
public bool SplFixedArray::offsetExists( int $index )
public mixed SplFixedArray::offsetGet( int $index )
public void SplFixedArray::offsetSet( int $index , mixed $newval )
public void SplFixedArray::offsetUnset( int $index )
public void SplFixedArray::rewind( void )
public mixed SplFixedArray::current( void )
public int SplFixedArray::key( void )
public void SplFixedArray::next( void )
public bool SplFixedArray::valid( void )
public mixed SplHeap::extract( void )
public void SplHeap::insert( mixed $value )
public mixed SplHeap::top( void )
public int SplHeap::count( void )
public bool SplHeap::isEmpty( void )
public void SplHeap::rewind( void )
public mixed SplHeap::current( void )
public mixed SplHeap::key( void )
public void SplHeap::next( void )
public bool SplHeap::valid( void )
public void SplHeap::recoverFromCorruption( void )
public void SplObjectStorage::attach( object $object  [, mixed $data = NULL ])
public void SplObjectStorage::detach( object $object )
public bool SplObjectStorage::contains( object $object )
public void SplObjectStorage::addAll( SplObjectStorage $storage )
public void SplObjectStorage::removeAll( SplObjectStorage $storage )
public void SplObjectStorage::removeAllExcept( SplObjectStorage $storage )
public void SplObjectStorage::removeAllExcept( SplObjectStorage $storage )
public mixed SplObjectStorage::getInfo( void )
public void SplObjectStorage::setInfo( mixed $data )
public string SplObjectStorage::getHash( object $object )
public int SplObjectStorage::count( void )
public void SplObjectStorage::rewind( void )
public bool SplObjectStorage::valid( void )
public int SplObjectStorage::key( void )
public object SplObjectStorage::current( void )
public void SplObjectStorage::next( void )
public void SplObjectStorage::unserialize( string $serialized )
public string SplObjectStorage::serialize( void )
public bool SplObjectStorage::offsetExists( object $object )
public void SplObjectStorage::offsetSet( object $object  [, mixed $data = NULL ])
public void SplObjectStorage::offsetUnset( object $object )
public mixed SplObjectStorage::offsetGet( object $object )
public int SplPriorityQueue::compare( mixed $priority1 , mixed $priority2 )
public void SplPriorityQueue::insert( mixed $value , mixed $priority )
public void SplPriorityQueue::setExtractFlags( int $flags )
public mixed SplPriorityQueue::top( void )
public mixed SplPriorityQueue::extract( void )
public int SplPriorityQueue::count( void )
public bool SplPriorityQueue::isEmpty( void )
public void SplPriorityQueue::rewind( void )
public mixed SplPriorityQueue::current( void )
public mixed SplPriorityQueue::key( void )
public void SplPriorityQueue::next( void )
public bool SplPriorityQueue::valid( void )
public void SplPriorityQueue::recoverFromCorruption( void )
void SplQueue::enqueue( mixed $value )
mixed SplQueue::dequeue( void )
void SplQueue::setIteratorMode( int $mode )
void SplStack::setIteratorMode( int $mode )
public SplTempFileObject::__construct([ int $max_memory ])
public bool XMLReader::close( void )
public string XMLReader::getAttribute( string $name )
public string XMLReader::getAttributeNo( int $index )
public string XMLReader::getAttributeNs( string $localName , string $namespaceURI )
public string XMLReader::getAttributeNo( int $index )
public string XMLReader::getAttributeNs( string $localName , string $namespaceURI )
public bool XMLReader::getParserProperty( int $property )
public bool XMLReader::isValid( void )
public string XMLReader::lookupNamespace( string $prefix )
public bool XMLReader::moveToAttributeNo( int $index )
public bool XMLReader::moveToAttribute( string $name )
public bool XMLReader::moveToAttributeNo( int $index )
public bool XMLReader::moveToAttributeNs( string $localName , string $namespaceURI )
public bool XMLReader::moveToAttributeNs( string $localName , string $namespaceURI )
public bool XMLReader::moveToElement( void )
public bool XMLReader::moveToFirstAttribute( void )
public bool XMLReader::moveToNextAttribute( void )
public bool XMLReader::open( string $URI  [, string $encoding  [, int $options = 0 ]])
public bool XMLReader::read( void )
public string XMLReader::readInnerXML( void )
public string XMLReader::readOuterXML( void )
public string XMLReader::readString( void )
public bool XMLReader::next([ string $localname ])
public string XMLReader::readString( void )
public bool XMLReader::setSchema( string $filename )
public bool XMLReader::setParserProperty( int $property , bool $value )
public bool XMLReader::setRelaxNGSchema( string $filename )
public bool XMLReader::setRelaxNGSchemaSource( string $source )
public bool XMLReader::setRelaxNGSchemaSource( string $source )
public DOMNode XMLReader::expand([ DOMNode $basenode ])
bool XMLWriter::openMemory( void )
bool XMLWriter::setIndent( bool $indent )
bool XMLWriter::setIndentString( string $indentString )
bool XMLWriter::setIndentString( string $indentString )
bool XMLWriter::startComment( void )
bool XMLWriter::endComment( void )
bool XMLWriter::startAttribute( string $name )
bool XMLWriter::startAttributeNS( string $prefix , string $name , string $uri )
bool XMLWriter::endAttribute( void )
bool XMLWriter::writeAttribute( string $name , string $value )
bool XMLWriter::writeAttributeNS( string $prefix , string $name , string $uri , string $content )
bool XMLWriter::startElement( string $name )
bool XMLWriter::startElementNS( string $prefix , string $name , string $uri )
bool XMLWriter::endElement( void )
bool XMLWriter::fullEndElement( void )
bool XMLWriter::writeElement( string $name  [, string $content ])
bool XMLWriter::writeElementNS( string $prefix , string $name , string $uri  [, string $content ])
bool XMLWriter::text( string $content )
bool XMLWriter::writeRaw( string $content )
bool XMLWriter::startDocument([ string $version = 1.0  [, string $encoding = NULL  [, string $standalone ]]])
bool XMLWriter::endDocument( void )
bool XMLWriter::writeComment( string $content )
string XMLWriter::outputMemory([ bool $flush = true ])
mixed XMLWriter::flush([ bool $empty = true ])
public bool finfo::set_flags( int $options )
public string finfo::file( string $file_name = NULL  [, int $options = FILEINFO_NONE  [, resource $context = NULL ]])
public string finfo::buffer( string $string = NULL  [, int $options = FILEINFO_NONE  [, resource $context = NULL ]])
public int php_user_filter::filter( resource $in , resource $out , int &$consumed , bool $closing )
public bool php_user_filter::onCreate( void )
public void php_user_filter::onClose( void )
